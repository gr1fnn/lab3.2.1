import numpy as np
from cvxopt import matrix, solvers
import time

# Первая задача (Минимизация)
start = time.time()

# Коэффициенты целевой функции
c1 = matrix([1200.0, 1000.0, 1500.0, 1200.0])

# Ограничения (левая часть) для неравенств <=
G1 = matrix([
    [18.0, 26.0, 16.0, 10.0],
    [150.0, 140.0, 50.0, 80.0],
    [170.0, 230.0, 280.0, 120.0],
    [31.0, 42.0, 30.0, 20.0],
])

# Правая часть ограничений (для неравенств <=)
h1 = matrix([110000.0, 950000.0, 1200000.0, 180000.0])

# Ограничения (левая часть) для неравенств >= (умножаем на -1)
G2 = matrix([
    [-200.0, -150.0, -170.0, -50.0]  # Для неравенства >=
])

# Правая часть ограничений (для неравенств >=)
h2 = matrix([-750000.0])  # Неравенство >=

# Объединяем ограничения
G = matrix([[G1], [G2]])  # Объединяем по вертикали
h = matrix(h1.tolist() + h2.tolist())  # Объединяем по горизонтали

# Решение задачи
res1 = solvers.lp(c1, G, h)

print("Результат первой задачи:")
for i in range(len(res1['x'])):
    print(f"x{i+1} =", round(res1['x'][i], 2))
print("Объем ресурса:", round(res1['primal objective'], 2))
stop = time.time()
print("Время первой задачи:", stop - start)

# Вторая задача (Максимизация)
start = time.time()

# Коэффициенты целевой функции (умножаем на -1 для максимизации)
c2 = matrix([-120.0, -50.0, -30.0, -100.0])

# Ограничения (левая часть) для неравенств <=
G2_1 = matrix([
    [18.0, 26.0, 16.0, 10.0],
    [150.0, 140.0, 50.0, 80.0],
    [170.0, 230.0, 280.0, 120.0],
    [31.0, 42.0, 30.0, 20.0],
])

# Правая часть ограничений (для неравенств <=)
h2_1 = matrix([110000.0, 950000.0, 1200000.0, 180000.0])

# Объединяем ограничения для второй задачи
G2 = G2_1
h2 = h2_1

# Добавление ограничения с результатом первой задачи
if res1['status'] == 'optimal':
    G2 = matrix([[G2_1], [-1 * np.array(res1['x']).flatten()]])  # Для неравенства >=
    h2 = matrix(h2_1.tolist() + [-round(res1['primal objective'], 2)]) 
else:
    G2 = G2_1
    h2 = h2_1

# Решение задачи
res2 = solvers.lp(c2, G2, h2)

print("Результат второй задачи:")
for i in range(len(res2['x'])):
    print(f"t{i+1} =", round(res2['x'][i], 2))
print("Объем ресурса:", round(-res2['primal objective'], 2))  # Умножаем на -1 для получения максимального значения
stop = time.time()
print("Время второй задачи:", stop - start)
